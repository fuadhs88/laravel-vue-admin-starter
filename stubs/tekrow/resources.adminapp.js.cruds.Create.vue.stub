<template>
  <form @submit.prevent="submitForm">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary card-header-icon">
            <div class="card-icon">
              <i class="material-icons">add</i>
            </div>
            <h4 class="card-title">Create {{ DummyText }}</h4>
          </div>
          <div class="card-body">
            <bootstrap-alert />
            <div class="row">
              <div class="col-md-12">
                <div
                  class="form-group bmd-form-group"
                  :class="{
                    'has-items': form.name,
                    'is-focused': activeField == 'name'
                  }"
                >
                  <label class="bmd-label-floating required">Name</label>
                  <input
                    class="form-control"
                    type="text"
                    v-model="form.name"
                    @focus="focusField('name')"
                    @blur="clearFocus"
                    required
                  />
                </div>
              </div>
            </div>
          </div>
          <div class="card-footer">
            <vue-button-spinner
              class="btn-primary"
              :status="status"
              :isLoading="loading"
              :disabled="loading"
            >
              Save
            </vue-button-spinner>
          </div>
        </div>
      </div>
    </div>
  </form>
</template>

<script>
import { mapGetters, mapActions } from 'vuex'

export default {
  name: "Create{{ DummyText }}",
  data() {
    return {
      status: '',
      form: {},
      activeField: ''
    }
  },
  computed: {
    ...mapGetters('{{ DummyTextPlu }}Single', ['entry', 'loading'])
  },
  async mounted(){

  },
  beforeDestroy() {
    this.resetState()
  },
  methods: {
    ...mapActions('{{ DummyTextPlu }}Single', ['storeData', 'resetState', 'setEntry']),

    submitForm() {
      this.setEntry(_.cloneDeep(this.form))
      this.storeData()
        .then(() => {
          this.$eventHub.$emit('create-success')
          this.$eventHub.$emit('{{ DummyTextPlu }}CreateSuccess')
        })
        .catch(error => {
          this.status = 'failed'
          _.delay(() => {
            this.status = ''
          }, 3000)
        })
    },
    focusField(name) {
      this.activeField = name
    },
    clearFocus() {
      this.activeField = ''
    }
  }
}
</script>
